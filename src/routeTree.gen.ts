/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsImport } from './routes/terms'
import { Route as SupportImport } from './routes/support'
import { Route as PolicyImport } from './routes/policy'
import { Route as FeaturesImport } from './routes/features'
import { Route as DisclaimerImport } from './routes/disclaimer'
import { Route as ContactUsImport } from './routes/contact-us'
import { Route as AuthImport } from './routes/auth'
import { Route as AccountImport } from './routes/account'
import { Route as AboutUsImport } from './routes/about-us'
import { Route as AccountIndexImport } from './routes/account/index'
import { Route as EmailChangeImport } from './routes/email.change'
import { Route as AuthResetPasswordImport } from './routes/auth/reset-password'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthForgotPasswordImport } from './routes/auth/forgot-password'
import { Route as AccountStorageImport } from './routes/account/storage'
import { Route as AccountSettingsImport } from './routes/account/settings'
import { Route as AuthLoginIndexImport } from './routes/auth/login/index'
import { Route as AuthLoginSuccessImport } from './routes/auth/login/success'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const TermsRoute = TermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const SupportRoute = SupportImport.update({
  id: '/support',
  path: '/support',
  getParentRoute: () => rootRoute,
} as any)

const PolicyRoute = PolicyImport.update({
  id: '/policy',
  path: '/policy',
  getParentRoute: () => rootRoute,
} as any)

const FeaturesRoute = FeaturesImport.update({
  id: '/features',
  path: '/features',
  getParentRoute: () => rootRoute,
} as any)

const DisclaimerRoute = DisclaimerImport.update({
  id: '/disclaimer',
  path: '/disclaimer',
  getParentRoute: () => rootRoute,
} as any)

const ContactUsRoute = ContactUsImport.update({
  id: '/contact-us',
  path: '/contact-us',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AccountRoute = AccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRoute,
} as any)

const AboutUsRoute = AboutUsImport.update({
  id: '/about-us',
  path: '/about-us',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AccountIndexRoute = AccountIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AccountRoute,
} as any)

const EmailChangeRoute = EmailChangeImport.update({
  id: '/email/change',
  path: '/email/change',
  getParentRoute: () => rootRoute,
} as any)

const AuthResetPasswordRoute = AuthResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => AuthRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRoute,
} as any)

const AccountStorageRoute = AccountStorageImport.update({
  id: '/storage',
  path: '/storage',
  getParentRoute: () => AccountRoute,
} as any)

const AccountSettingsRoute = AccountSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AccountRoute,
} as any)

const AuthLoginIndexRoute = AuthLoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLoginSuccessRoute = AuthLoginSuccessImport.update({
  id: '/login/success',
  path: '/login/success',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about-us': {
      id: '/about-us'
      path: '/about-us'
      fullPath: '/about-us'
      preLoaderRoute: typeof AboutUsImport
      parentRoute: typeof rootRoute
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/contact-us': {
      id: '/contact-us'
      path: '/contact-us'
      fullPath: '/contact-us'
      preLoaderRoute: typeof ContactUsImport
      parentRoute: typeof rootRoute
    }
    '/disclaimer': {
      id: '/disclaimer'
      path: '/disclaimer'
      fullPath: '/disclaimer'
      preLoaderRoute: typeof DisclaimerImport
      parentRoute: typeof rootRoute
    }
    '/features': {
      id: '/features'
      path: '/features'
      fullPath: '/features'
      preLoaderRoute: typeof FeaturesImport
      parentRoute: typeof rootRoute
    }
    '/policy': {
      id: '/policy'
      path: '/policy'
      fullPath: '/policy'
      preLoaderRoute: typeof PolicyImport
      parentRoute: typeof rootRoute
    }
    '/support': {
      id: '/support'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof SupportImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsImport
      parentRoute: typeof rootRoute
    }
    '/account/settings': {
      id: '/account/settings'
      path: '/settings'
      fullPath: '/account/settings'
      preLoaderRoute: typeof AccountSettingsImport
      parentRoute: typeof AccountImport
    }
    '/account/storage': {
      id: '/account/storage'
      path: '/storage'
      fullPath: '/account/storage'
      preLoaderRoute: typeof AccountStorageImport
      parentRoute: typeof AccountImport
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof AuthImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof AuthImport
    }
    '/auth/reset-password': {
      id: '/auth/reset-password'
      path: '/reset-password'
      fullPath: '/auth/reset-password'
      preLoaderRoute: typeof AuthResetPasswordImport
      parentRoute: typeof AuthImport
    }
    '/email/change': {
      id: '/email/change'
      path: '/email/change'
      fullPath: '/email/change'
      preLoaderRoute: typeof EmailChangeImport
      parentRoute: typeof rootRoute
    }
    '/account/': {
      id: '/account/'
      path: '/'
      fullPath: '/account/'
      preLoaderRoute: typeof AccountIndexImport
      parentRoute: typeof AccountImport
    }
    '/auth/login/success': {
      id: '/auth/login/success'
      path: '/login/success'
      fullPath: '/auth/login/success'
      preLoaderRoute: typeof AuthLoginSuccessImport
      parentRoute: typeof AuthImport
    }
    '/auth/login/': {
      id: '/auth/login/'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginIndexImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AccountRouteChildren {
  AccountSettingsRoute: typeof AccountSettingsRoute
  AccountStorageRoute: typeof AccountStorageRoute
  AccountIndexRoute: typeof AccountIndexRoute
}

const AccountRouteChildren: AccountRouteChildren = {
  AccountSettingsRoute: AccountSettingsRoute,
  AccountStorageRoute: AccountStorageRoute,
  AccountIndexRoute: AccountIndexRoute,
}

const AccountRouteWithChildren =
  AccountRoute._addFileChildren(AccountRouteChildren)

interface AuthRouteChildren {
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute
  AuthLoginSuccessRoute: typeof AuthLoginSuccessRoute
  AuthLoginIndexRoute: typeof AuthLoginIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
  AuthLoginSuccessRoute: AuthLoginSuccessRoute,
  AuthLoginIndexRoute: AuthLoginIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about-us': typeof AboutUsRoute
  '/account': typeof AccountRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/contact-us': typeof ContactUsRoute
  '/disclaimer': typeof DisclaimerRoute
  '/features': typeof FeaturesRoute
  '/policy': typeof PolicyRoute
  '/support': typeof SupportRoute
  '/terms': typeof TermsRoute
  '/account/settings': typeof AccountSettingsRoute
  '/account/storage': typeof AccountStorageRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/email/change': typeof EmailChangeRoute
  '/account/': typeof AccountIndexRoute
  '/auth/login/success': typeof AuthLoginSuccessRoute
  '/auth/login': typeof AuthLoginIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about-us': typeof AboutUsRoute
  '/auth': typeof AuthRouteWithChildren
  '/contact-us': typeof ContactUsRoute
  '/disclaimer': typeof DisclaimerRoute
  '/features': typeof FeaturesRoute
  '/policy': typeof PolicyRoute
  '/support': typeof SupportRoute
  '/terms': typeof TermsRoute
  '/account/settings': typeof AccountSettingsRoute
  '/account/storage': typeof AccountStorageRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/email/change': typeof EmailChangeRoute
  '/account': typeof AccountIndexRoute
  '/auth/login/success': typeof AuthLoginSuccessRoute
  '/auth/login': typeof AuthLoginIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about-us': typeof AboutUsRoute
  '/account': typeof AccountRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/contact-us': typeof ContactUsRoute
  '/disclaimer': typeof DisclaimerRoute
  '/features': typeof FeaturesRoute
  '/policy': typeof PolicyRoute
  '/support': typeof SupportRoute
  '/terms': typeof TermsRoute
  '/account/settings': typeof AccountSettingsRoute
  '/account/storage': typeof AccountStorageRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/register': typeof AuthRegisterRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/email/change': typeof EmailChangeRoute
  '/account/': typeof AccountIndexRoute
  '/auth/login/success': typeof AuthLoginSuccessRoute
  '/auth/login/': typeof AuthLoginIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about-us'
    | '/account'
    | '/auth'
    | '/contact-us'
    | '/disclaimer'
    | '/features'
    | '/policy'
    | '/support'
    | '/terms'
    | '/account/settings'
    | '/account/storage'
    | '/auth/forgot-password'
    | '/auth/register'
    | '/auth/reset-password'
    | '/email/change'
    | '/account/'
    | '/auth/login/success'
    | '/auth/login'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about-us'
    | '/auth'
    | '/contact-us'
    | '/disclaimer'
    | '/features'
    | '/policy'
    | '/support'
    | '/terms'
    | '/account/settings'
    | '/account/storage'
    | '/auth/forgot-password'
    | '/auth/register'
    | '/auth/reset-password'
    | '/email/change'
    | '/account'
    | '/auth/login/success'
    | '/auth/login'
  id:
    | '__root__'
    | '/'
    | '/about-us'
    | '/account'
    | '/auth'
    | '/contact-us'
    | '/disclaimer'
    | '/features'
    | '/policy'
    | '/support'
    | '/terms'
    | '/account/settings'
    | '/account/storage'
    | '/auth/forgot-password'
    | '/auth/register'
    | '/auth/reset-password'
    | '/email/change'
    | '/account/'
    | '/auth/login/success'
    | '/auth/login/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutUsRoute: typeof AboutUsRoute
  AccountRoute: typeof AccountRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
  ContactUsRoute: typeof ContactUsRoute
  DisclaimerRoute: typeof DisclaimerRoute
  FeaturesRoute: typeof FeaturesRoute
  PolicyRoute: typeof PolicyRoute
  SupportRoute: typeof SupportRoute
  TermsRoute: typeof TermsRoute
  EmailChangeRoute: typeof EmailChangeRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutUsRoute: AboutUsRoute,
  AccountRoute: AccountRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
  ContactUsRoute: ContactUsRoute,
  DisclaimerRoute: DisclaimerRoute,
  FeaturesRoute: FeaturesRoute,
  PolicyRoute: PolicyRoute,
  SupportRoute: SupportRoute,
  TermsRoute: TermsRoute,
  EmailChangeRoute: EmailChangeRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about-us",
        "/account",
        "/auth",
        "/contact-us",
        "/disclaimer",
        "/features",
        "/policy",
        "/support",
        "/terms",
        "/email/change"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about-us": {
      "filePath": "about-us.tsx"
    },
    "/account": {
      "filePath": "account.tsx",
      "children": [
        "/account/settings",
        "/account/storage",
        "/account/"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/forgot-password",
        "/auth/register",
        "/auth/reset-password",
        "/auth/login/success",
        "/auth/login/"
      ]
    },
    "/contact-us": {
      "filePath": "contact-us.tsx"
    },
    "/disclaimer": {
      "filePath": "disclaimer.tsx"
    },
    "/features": {
      "filePath": "features.tsx"
    },
    "/policy": {
      "filePath": "policy.tsx"
    },
    "/support": {
      "filePath": "support.tsx"
    },
    "/terms": {
      "filePath": "terms.tsx"
    },
    "/account/settings": {
      "filePath": "account/settings.tsx",
      "parent": "/account"
    },
    "/account/storage": {
      "filePath": "account/storage.tsx",
      "parent": "/account"
    },
    "/auth/forgot-password": {
      "filePath": "auth/forgot-password.tsx",
      "parent": "/auth"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx",
      "parent": "/auth"
    },
    "/auth/reset-password": {
      "filePath": "auth/reset-password.tsx",
      "parent": "/auth"
    },
    "/email/change": {
      "filePath": "email.change.tsx"
    },
    "/account/": {
      "filePath": "account/index.tsx",
      "parent": "/account"
    },
    "/auth/login/success": {
      "filePath": "auth/login/success.tsx",
      "parent": "/auth"
    },
    "/auth/login/": {
      "filePath": "auth/login/index.tsx",
      "parent": "/auth"
    }
  }
}
ROUTE_MANIFEST_END */
