[tools]
elixir = "1.18.4-otp-27"
erlang = "27.3"
node = "24.10.0"

[hooks]
# Enabling corepack will install the `pnpm` package manager specified in your package.json
# alternatively, you can also install `pnpm` with mise
postinstall = 'npx corepack enable'

[settings]
# This must be enabled to make the hooks work
experimental = true

[env]
_.path = ['./node_modules/.bin']

[tasks.pnpm-install]
description = 'Installs dependencies with pnpm'
dir = "frontend"
run = 'pnpm install'
sources = ['package.json', 'pnpm-lock.yaml', 'mise.toml']
outputs = ['node_modules/.pnpm/lock.yaml']

[tasks.check]
description = 'Calls your check script in `package.json`'
dir = "frontend"
run = 'node --run check'
depends = ['pnpm-install']

[tasks.build]
description = 'Calls your build script in `package.json`'
dir = "frontend"
run = 'node --run build'
depends = ['pnpm-install']

[tasks.build-test]
description = 'Calls your build:test script in `package.json`'
dir = "frontend"
run = 'node --run build:test'
depends = ['pnpm-install']

[tasks.preview-test]
description = 'Calls your preview:test script in `package.json`'
dir = "frontend"
run = 'node --run preview:test'
depends = ['pnpm-install']

[tasks.build-storybook]
description = "Build Storybook"
dir = "frontend"
run = 'pnpm storybook build'
depends = ['pnpm-install']

[tasks.playwright-install]
description = 'Install playwright dependencies'
dir = "frontend"
run = 'pnpm exec playwright install --with-deps'
depends = ['pnpm-install']

[tasks.cypress-install]
description = 'Install cypress dependencies'
dir = "frontend"
run = 'pnpm cypress install'
depends = ['pnpm-install']

[tasks.test-unit]
description = "Run unit tests"
dir = "frontend"
run = 'pnpm test:unit'
depends = ['playwright-install']

[tasks.fe-coverage-report]
description = "Generate frontend coverage report"
dir = "frontend"
run = 'npx nyc report --reporter=text-summary'
depends = ['pnpm-install']

[tasks.log]
run = '''
aws logs tail '/ecs/admin' --follow --profile $1
'''

[tasks.remote]
usage = '''
arg "profile" "AWS profile name" default="dev"
'''
run = [
    'aws sts get-caller-identity --profile $usage_profile',
    'aws ecs execute-command --cluster graasp-$usage_profile --task $(aws ecs list-tasks --cluster graasp-$usage_profile --service admin --query "taskArns[0]" --output text --profile $usage_profile) --container admin --command "/app/bin/admin remote" --interactive --profile $usage_profile'
]

[tasks.backend-dev]
alias = "server"
run = "mix phx.server"

[tasks.frontend-dev]
alias = "client"
depends = ["pnpm-install"]
dir = "frontend"
run = "node --run dev"
description = "start the frontend server in development mode"

[tasks.dev]
depends = ["backend-dev", "frontend-dev"]
description = "start the backend and frontend servers in development mode"
