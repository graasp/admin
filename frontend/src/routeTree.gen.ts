/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ClientIndexRouteImport } from './routes/client/index'
import { Route as ClientAnchorRouteImport } from './routes/client/anchor'
import { Route as ClientPathlessLayoutRouteImport } from './routes/client/_pathlessLayout'
import { Route as ClientPostsRouteRouteImport } from './routes/client/posts.route'
import { Route as ClientPostsIndexRouteImport } from './routes/client/posts.index'
import { Route as ClientPostsPostIdRouteImport } from './routes/client/posts.$postId'
import { Route as ClientPathlessLayoutNestedLayoutRouteImport } from './routes/client/_pathlessLayout/_nested-layout'
import { Route as ClientPathlessLayoutNestedLayoutRouteBRouteImport } from './routes/client/_pathlessLayout/_nested-layout/route-b'
import { Route as ClientPathlessLayoutNestedLayoutRouteARouteImport } from './routes/client/_pathlessLayout/_nested-layout/route-a'

const ClientRouteImport = createFileRoute('/client')()

const ClientRoute = ClientRouteImport.update({
  id: '/client',
  path: '/client',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientIndexRoute = ClientIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ClientRoute,
} as any)
const ClientAnchorRoute = ClientAnchorRouteImport.update({
  id: '/anchor',
  path: '/anchor',
  getParentRoute: () => ClientRoute,
} as any)
const ClientPathlessLayoutRoute = ClientPathlessLayoutRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => ClientRoute,
} as any)
const ClientPostsRouteRoute = ClientPostsRouteRouteImport.update({
  id: '/client/posts',
  path: '/client/posts',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientPostsIndexRoute = ClientPostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ClientPostsRouteRoute,
} as any)
const ClientPostsPostIdRoute = ClientPostsPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => ClientPostsRouteRoute,
} as any)
const ClientPathlessLayoutNestedLayoutRoute =
  ClientPathlessLayoutNestedLayoutRouteImport.update({
    id: '/_nested-layout',
    getParentRoute: () => ClientPathlessLayoutRoute,
  } as any)
const ClientPathlessLayoutNestedLayoutRouteBRoute =
  ClientPathlessLayoutNestedLayoutRouteBRouteImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => ClientPathlessLayoutNestedLayoutRoute,
  } as any)
const ClientPathlessLayoutNestedLayoutRouteARoute =
  ClientPathlessLayoutNestedLayoutRouteARouteImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => ClientPathlessLayoutNestedLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/client/posts': typeof ClientPostsRouteRouteWithChildren
  '/client': typeof ClientPathlessLayoutNestedLayoutRouteWithChildren
  '/client/anchor': typeof ClientAnchorRoute
  '/client/': typeof ClientIndexRoute
  '/client/posts/$postId': typeof ClientPostsPostIdRoute
  '/client/posts/': typeof ClientPostsIndexRoute
  '/client/route-a': typeof ClientPathlessLayoutNestedLayoutRouteARoute
  '/client/route-b': typeof ClientPathlessLayoutNestedLayoutRouteBRoute
}
export interface FileRoutesByTo {
  '/client': typeof ClientPathlessLayoutNestedLayoutRouteWithChildren
  '/client/anchor': typeof ClientAnchorRoute
  '/client/posts/$postId': typeof ClientPostsPostIdRoute
  '/client/posts': typeof ClientPostsIndexRoute
  '/client/route-a': typeof ClientPathlessLayoutNestedLayoutRouteARoute
  '/client/route-b': typeof ClientPathlessLayoutNestedLayoutRouteBRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/client/posts': typeof ClientPostsRouteRouteWithChildren
  '/client': typeof ClientRouteWithChildren
  '/client/_pathlessLayout': typeof ClientPathlessLayoutRouteWithChildren
  '/client/anchor': typeof ClientAnchorRoute
  '/client/': typeof ClientIndexRoute
  '/client/_pathlessLayout/_nested-layout': typeof ClientPathlessLayoutNestedLayoutRouteWithChildren
  '/client/posts/$postId': typeof ClientPostsPostIdRoute
  '/client/posts/': typeof ClientPostsIndexRoute
  '/client/_pathlessLayout/_nested-layout/route-a': typeof ClientPathlessLayoutNestedLayoutRouteARoute
  '/client/_pathlessLayout/_nested-layout/route-b': typeof ClientPathlessLayoutNestedLayoutRouteBRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/client/posts'
    | '/client'
    | '/client/anchor'
    | '/client/'
    | '/client/posts/$postId'
    | '/client/posts/'
    | '/client/route-a'
    | '/client/route-b'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/client'
    | '/client/anchor'
    | '/client/posts/$postId'
    | '/client/posts'
    | '/client/route-a'
    | '/client/route-b'
  id:
    | '__root__'
    | '/client/posts'
    | '/client'
    | '/client/_pathlessLayout'
    | '/client/anchor'
    | '/client/'
    | '/client/_pathlessLayout/_nested-layout'
    | '/client/posts/$postId'
    | '/client/posts/'
    | '/client/_pathlessLayout/_nested-layout/route-a'
    | '/client/_pathlessLayout/_nested-layout/route-b'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ClientPostsRouteRoute: typeof ClientPostsRouteRouteWithChildren
  ClientRoute: typeof ClientRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/client': {
      id: '/client'
      path: '/client'
      fullPath: '/client'
      preLoaderRoute: typeof ClientRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/client/': {
      id: '/client/'
      path: '/'
      fullPath: '/client/'
      preLoaderRoute: typeof ClientIndexRouteImport
      parentRoute: typeof ClientRoute
    }
    '/client/anchor': {
      id: '/client/anchor'
      path: '/anchor'
      fullPath: '/client/anchor'
      preLoaderRoute: typeof ClientAnchorRouteImport
      parentRoute: typeof ClientRoute
    }
    '/client/_pathlessLayout': {
      id: '/client/_pathlessLayout'
      path: '/client'
      fullPath: '/client'
      preLoaderRoute: typeof ClientPathlessLayoutRouteImport
      parentRoute: typeof ClientRoute
    }
    '/client/posts': {
      id: '/client/posts'
      path: '/client/posts'
      fullPath: '/client/posts'
      preLoaderRoute: typeof ClientPostsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/client/posts/': {
      id: '/client/posts/'
      path: '/'
      fullPath: '/client/posts/'
      preLoaderRoute: typeof ClientPostsIndexRouteImport
      parentRoute: typeof ClientPostsRouteRoute
    }
    '/client/posts/$postId': {
      id: '/client/posts/$postId'
      path: '/$postId'
      fullPath: '/client/posts/$postId'
      preLoaderRoute: typeof ClientPostsPostIdRouteImport
      parentRoute: typeof ClientPostsRouteRoute
    }
    '/client/_pathlessLayout/_nested-layout': {
      id: '/client/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: '/client'
      preLoaderRoute: typeof ClientPathlessLayoutNestedLayoutRouteImport
      parentRoute: typeof ClientPathlessLayoutRoute
    }
    '/client/_pathlessLayout/_nested-layout/route-b': {
      id: '/client/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/client/route-b'
      preLoaderRoute: typeof ClientPathlessLayoutNestedLayoutRouteBRouteImport
      parentRoute: typeof ClientPathlessLayoutNestedLayoutRoute
    }
    '/client/_pathlessLayout/_nested-layout/route-a': {
      id: '/client/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/client/route-a'
      preLoaderRoute: typeof ClientPathlessLayoutNestedLayoutRouteARouteImport
      parentRoute: typeof ClientPathlessLayoutNestedLayoutRoute
    }
  }
}

interface ClientPostsRouteRouteChildren {
  ClientPostsPostIdRoute: typeof ClientPostsPostIdRoute
  ClientPostsIndexRoute: typeof ClientPostsIndexRoute
}

const ClientPostsRouteRouteChildren: ClientPostsRouteRouteChildren = {
  ClientPostsPostIdRoute: ClientPostsPostIdRoute,
  ClientPostsIndexRoute: ClientPostsIndexRoute,
}

const ClientPostsRouteRouteWithChildren =
  ClientPostsRouteRoute._addFileChildren(ClientPostsRouteRouteChildren)

interface ClientPathlessLayoutNestedLayoutRouteChildren {
  ClientPathlessLayoutNestedLayoutRouteARoute: typeof ClientPathlessLayoutNestedLayoutRouteARoute
  ClientPathlessLayoutNestedLayoutRouteBRoute: typeof ClientPathlessLayoutNestedLayoutRouteBRoute
}

const ClientPathlessLayoutNestedLayoutRouteChildren: ClientPathlessLayoutNestedLayoutRouteChildren =
  {
    ClientPathlessLayoutNestedLayoutRouteARoute:
      ClientPathlessLayoutNestedLayoutRouteARoute,
    ClientPathlessLayoutNestedLayoutRouteBRoute:
      ClientPathlessLayoutNestedLayoutRouteBRoute,
  }

const ClientPathlessLayoutNestedLayoutRouteWithChildren =
  ClientPathlessLayoutNestedLayoutRoute._addFileChildren(
    ClientPathlessLayoutNestedLayoutRouteChildren,
  )

interface ClientPathlessLayoutRouteChildren {
  ClientPathlessLayoutNestedLayoutRoute: typeof ClientPathlessLayoutNestedLayoutRouteWithChildren
}

const ClientPathlessLayoutRouteChildren: ClientPathlessLayoutRouteChildren = {
  ClientPathlessLayoutNestedLayoutRoute:
    ClientPathlessLayoutNestedLayoutRouteWithChildren,
}

const ClientPathlessLayoutRouteWithChildren =
  ClientPathlessLayoutRoute._addFileChildren(ClientPathlessLayoutRouteChildren)

interface ClientRouteChildren {
  ClientPathlessLayoutRoute: typeof ClientPathlessLayoutRouteWithChildren
  ClientAnchorRoute: typeof ClientAnchorRoute
  ClientIndexRoute: typeof ClientIndexRoute
}

const ClientRouteChildren: ClientRouteChildren = {
  ClientPathlessLayoutRoute: ClientPathlessLayoutRouteWithChildren,
  ClientAnchorRoute: ClientAnchorRoute,
  ClientIndexRoute: ClientIndexRoute,
}

const ClientRouteWithChildren =
  ClientRoute._addFileChildren(ClientRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  ClientPostsRouteRoute: ClientPostsRouteRouteWithChildren,
  ClientRoute: ClientRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
